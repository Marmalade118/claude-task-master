# Task ID: 103
# Title: Implement Tagged Task Lists System for Multi-Context Task Management
# Status: pending
# Dependencies: 3, 11, 19
# Priority: medium
# Description: Develop a comprehensive tagged task lists system enabling users to organize, filter, and manage tasks across multiple contexts (e.g., personal, branch, version) with full backward compatibility.
# Details:
1. Extend the tasks.json schema to support a 'tags' structure, with 'master' as the default tag containing all existing tasks. Ensure seamless migration for users without tags.
2. Add a 'defaultTag' configuration option to config.json in the global section, defaulting to 'master'.
3. Implement tag management CLI commands: add-tag, delete, list, use (switch), rename, and copy. Each command should update the relevant data structures and persist changes.
4. Update all existing task commands (list, add-task, set-status, etc.) to accept a --tag flag, filtering or applying actions within the specified tag context.
5. Implement automatic tag creation from git branch names using a --from-branch flag, integrating with git APIs to detect current branch.
6. Maintain the current tag state in .taskmaster/state.json with currentTag set to 'master' by default, ensuring session persistence and correct context switching.
7. Guarantee backward compatibility: users without tags continue to operate in the 'master' context transparently.
8. Provide comprehensive documentation and migration notes for users, and update help menus to reflect new tag-related features.

# Test Strategy:
- Migrate an existing tasks.json and verify all tasks appear under the 'master' tag.
- Create, delete, rename, and copy tags using add-tag and other commands; confirm correct data structure updates and persistence.
- Switch between tags and verify task isolation and context switching.
- Use --tag flag with all supported commands and confirm correct filtering and operation.
- Test --from-branch flag by switching git branches and verifying tag creation and selection.
- Simulate usage without tags to ensure backward compatibility.
- Review documentation and help menus for accuracy and completeness.
- Run automated and manual tests for all new and modified commands, including edge cases (e.g., duplicate tag names, tag deletion with tasks).

# Subtasks:
## 1. Design Extended tasks.json Schema for Tag Support [done]
### Dependencies: None
### Description: Define and document the updated tasks.json schema to include a 'tags' structure, ensuring 'master' is the default tag containing all existing tasks.
### Details:
Create a schema that supports multiple tags, with backward compatibility for users without tags.
<info added on 2025-06-11T20:46:18.649Z>
Implementation completed in Part 1: SCHEMA DESIGN: Defined data structure transformation from {"tasks": [...]} to {"master": {"tasks": [...]}}. Tags are direct top-level keys, not nested under a "tags" wrapper. Each tag contains a "tasks" array with the standard task structure. Tag resolution layer provides 100% backward compatibility by intercepting tagged format and returning old format transparently to existing code.
</info added on 2025-06-11T20:46:18.649Z>

## 2. Implement Seamless Migration for Existing Users [done]
### Dependencies: 103.1
### Description: Develop a migration script or logic to move existing tasks into the 'master' tag for users upgrading from previous versions.
### Details:
Ensure no data loss and that users without tags continue to operate transparently.

## 3. Add 'defaultTag' Configuration Option to config.json Global Section [done]
### Dependencies: 103.1
### Description: Introduce a 'defaultTag' field in the global section of config.json, defaulting to 'master', and update configuration handling logic.
### Details:
Allow users to set and persist their preferred default tag in the global configuration section.
<info added on 2025-06-11T20:46:57.669Z>
Added global.defaultTag configuration option to .taskmaster/config.json structure in assets/config.json. Implemented complete tags section including autoSwitchOnBranch and gitIntegration options. Created migrateConfigJson() function in utils.js to handle updating existing configuration files during the migration process. Configuration is automatically created and updated during the silent migration process to ensure seamless transition for existing users.
</info added on 2025-06-11T20:46:57.669Z>

## 4. Develop Tag Management CLI Commands [done]
### Dependencies: 103.1, 103.3
### Description: Implement CLI commands for tag management: add-tag, delete, list, use (switch), rename, and copy, ensuring all changes are persisted.
### Details:
Each command should update the tasks.json and config files as needed. The primary command for creating tags should be 'add-tag' to maintain consistency with other task-master commands.
<info added on 2025-06-12T07:14:51.761Z>
✅ **COMPLETED: CLI Command Integration for Tag Management**

Successfully implemented complete CLI command integration for all tag management functions with enhanced UX features:

**Commands Implemented:**

1. **`task-master tags [--show-metadata]`** - List all available tags
   - Shows tag names, task counts, completion status
   - Optional metadata display (creation date, description)
   - Dynamic table width that adapts to terminal size
   - Current tag indicator with visual highlighting

2. **`task-master add-tag <name> [options]`** - Create new tags
   - `--copy-from-current` - Copy tasks from current tag
   - `--copy-from=<tag>` - Copy tasks from specified tag
   - `-d, --description <text>` - Set tag description
   - **Default behavior: Creates empty tags** (fixed from previous copying behavior)

3. **`task-master delete-tag <name> [--yes]`** - Delete tags with enhanced safety
   - **Changed from `--force` to `--yes`** for consistency
   - **Double confirmation system** using inquirer:
     - First: Yes/No confirmation prompt
     - Second: Type tag name to confirm deletion
   - Visual warning box showing impact
   - Automatic current tag switching if deleting active tag

4. **`task-master use-tag <name>`** - Switch tag contexts
   - Updates current tag in state.json
   - Validates tag existence before switching
   - Clear success messaging

5. **`task-master rename-tag <old> <new>`** - Rename existing tags
   - Validates both source and target names
   - Updates current tag reference if renaming active tag

6. **`task-master copy-tag <source> <target> [options]`** - Copy tags
   - `-d, --description <text>` - Set description for new tag
   - Deep copy of all tasks and metadata

**Key Improvements Made:**

Enhanced User Experience:
- **Double confirmation for destructive operations** using inquirer prompts
- **Consistent option naming** (`--yes` instead of `--force`)
- **Dynamic table layouts** that use full terminal width
- **Visual warning boxes** for dangerous operations
- **Contextual help displays** on command errors

Technical Fixes:
- **Fixed critical `_rawTaggedData` corruption bug** in readJSON/writeJSON cycle
- **Dynamic task counting** instead of stored counters (eliminates sync issues)
- **Master tag metadata enhancement** with creation dates and descriptions
- **Proper error handling** with command-specific help displays

CLI Integration:
- **Added all commands to help menu** in ui.js under "Tag Management" section
- **Comprehensive help functions** for each command with examples
- **Error handlers with contextual help** for better user guidance
- **Consistent command patterns** following established CLI conventions

**Testing Completed:**
- ✅ Created empty tags (default behavior)
- ✅ Created tags with task copying (explicit flags)
- ✅ Listed tags with and without metadata
- ✅ Double confirmation for tag deletion
- ✅ Tag switching and current tag persistence
- ✅ Table width responsiveness
- ✅ Master tag metadata enhancement
- ✅ Error handling and help displays

**Files Modified:**
- `scripts/modules/commands.js` - Added all tag management commands
- `scripts/modules/task-manager/tag-management.js` - Enhanced functions with inquirer
- `scripts/modules/ui.js` - Added tag commands to help menu
- Fixed critical data corruption bug in utils.js

The CLI integration is now complete and production-ready with enhanced safety features and improved user experience!
</info added on 2025-06-12T07:14:51.761Z>

## 5. Update Task Commands to Support --tag Flag [pending]
### Dependencies: 103.4
### Description: Modify all existing task-related CLI commands (list, add-task, set-status, etc.) to accept a --tag flag, applying actions within the specified tag context.
### Details:
Ensure commands filter or apply actions only to tasks within the selected tag.
<info added on 2025-06-11T18:23:45.185Z>
Dependencies: [4, 13, 14] - Requires CLI commands foundation, MCP tools integration, and state management utilities to properly implement --tag flag support across both CLI and MCP interfaces.
</info added on 2025-06-11T18:23:45.185Z>
<info added on 2025-06-12T22:44:17.705Z>
**CURRENT STATUS ANALYSIS - Commands Needing --tag Flag + projectRoot Fix**

After fixing the migration bug in readJSON and updating `list` and `move` commands, here's the current status:

**✅ COMPLETED:**
- `list` command - Has projectRoot fix + tag support working
- `move` command - Has projectRoot fix + tag support working  

**❌ STILL NEED BOTH --tag FLAG + projectRoot FIX:**

**High Priority (Core Task Operations):**
1. `show` - View specific tasks (needs tag context)
2. `add-task` - Create tasks (needs tag context) 
3. `set-status` - Update task status (needs tag context)
4. `next` - Find next task (needs tag context)

**Medium Priority (Task Modification):**
5. `update-task` - Update specific task (needs tag context)
6. `update-subtask` - Update subtask (needs tag context)
7. `add-subtask` - Add subtasks (needs tag context)
8. `remove-task` - Remove tasks (needs tag context)
9. `remove-subtask` - Remove subtasks (needs tag context)
10. `clear-subtasks` - Clear subtasks (needs tag context)
11. `expand` - Expand tasks (needs tag context)

**Lower Priority (Dependencies & Analysis):**
12. `add-dependency` - Add dependencies (needs tag context)
13. `remove-dependency` - Remove dependencies (needs tag context)
14. `validate-dependencies` - Validate deps (needs tag context)
15. `fix-dependencies` - Fix deps (needs tag context)
16. `generate` - Generate task files (needs tag context)
17. `analyze-complexity` - Analyze complexity (needs tag context)
18. `complexity-report` - View complexity report (needs tag context)

**✅ DON'T NEED TAG SUPPORT:**
- `init`, `models`, `parse-prd`, `research`, `migrate`, `sync-readme`
- Tag management commands (they manage tags themselves)

**NEXT STEPS:**
1. Start with high-priority commands (`show`, `add-task`, `set-status`, `next`)
2. Add `--tag` flag to each command
3. Ensure `findProjectRoot()` is called and passed to underlying functions
4. Update underlying functions to accept and use projectRoot parameter
5. Test migration and tag resolution for each command

**PATTERN TO FOLLOW:**
Same pattern as `list` and `move` commands:
- Add `--tag` option to CLI command
- Call `findProjectRoot()` in action function
- Pass `{ projectRoot }` context to underlying function
- Update underlying function signature to accept context parameter
- Pass projectRoot to readJSON/writeJSON calls
</info added on 2025-06-12T22:44:17.705Z>
<info added on 2025-06-12T22:47:22.415Z>
**PROGRESS UPDATE - show Command Completed Successfully**

✅ **COMPLETED: `show` command**
- Added `--tag` flag support to CLI command
- Fixed `findProjectRoot()` call and projectRoot passing
- Updated `displayTaskById` function to accept context parameter with projectRoot
- Updated `displayMultipleTasksSummary` function to accept context parameter
- Fixed readJSON calls to include projectRoot for proper tag resolution and migration
- **TESTED SUCCESSFULLY**: `task-master show 103` works perfectly with no errors

**TECHNICAL DETAILS:**
- CLI command now calls `findProjectRoot()` and passes `{ projectRoot, tag }` context
- UI functions extract projectRoot from context and pass to `readJSON(tasksPath, projectRoot, tag)`
- Migration logic now works correctly when viewing tasks
- Both single task and multiple task views work properly

**UPDATED STATUS - 1 of 4 High-Priority Commands Complete:**
1. ✅ `show` - **COMPLETED** 
2. ❌ `add-task` - Create tasks (needs tag context)
3. ❌ `set-status` - Update task status (needs tag context) 
4. ❌ `next` - Find next task (needs tag context)

**NEXT ACTION:** Continue with `add-task` command following the same proven pattern:
- Add `--tag` flag to CLI command
- Call `findProjectRoot()` in action function  
- Pass `{ projectRoot, tag }` context to underlying function
- Update underlying function to accept context and pass projectRoot to readJSON/writeJSON
</info added on 2025-06-12T22:47:22.415Z>
<info added on 2025-06-12T22:49:16.724Z>
**PROGRESS UPDATE - add-task Command Completed Successfully**

✅ **COMPLETED: `add-task` command**
- Already had `--tag` flag support in CLI command
- Already had `findProjectRoot()` call and projectRoot passing
- Already had proper context object with `{ projectRoot, tag }`
- Underlying `addTask` function already properly handles tag parameter and projectRoot
- **TESTED SUCCESSFULLY**: `task-master add-task --prompt="Test task for tag support" --priority=low` works perfectly with no errors

**TECHNICAL DETAILS:**
- CLI command already calls `findProjectRoot()` and passes `{ projectRoot, tag }` context
- `addTask` function extracts projectRoot from context and passes to `readJSON(tasksPath, projectRoot)`
- Migration logic works correctly when adding tasks
- Tag resolution and context handling work properly

**COMPLETED HIGH-PRIORITY COMMANDS:**
1. ✅ `show` - **COMPLETED** 
2. ✅ `add-task` - **COMPLETED**
3. ❌ `set-status` - Update task status (needs tag context)
4. ❌ `next` - Find next task (needs tag context)

**REMAINING WORK:**
Next commands to fix: `set-status` and `next` commands following the same pattern.
</info added on 2025-06-12T22:49:16.724Z>
<info added on 2025-06-13T02:48:17.985Z>
**FINAL PROGRESS UPDATE - Tag Management Issues Resolved**

✅ **COMPLETED: All Tag Management Issues Fixed**

**Major Issues Resolved:**
1. **Rogue `"created"` property cleanup** - Fixed root-level `"created"` property in master tag that was outside metadata
2. **Tags command error fixed** - Resolved undefined `taskCount` error by making calculation dynamic
3. **Data corruption prevention** - Enhanced `writeJSON` to automatically filter rogue properties during write operations

**Technical Fixes Applied:**
- **Enhanced `writeJSON` function** to automatically clean up rogue `created` and `description` properties from tag objects
- **Fixed `taskCount` calculation** to be dynamic (`tasks.length`) instead of hardcoded field
- **Cleaned up existing corruption** in master tag through forced write operation
- **All `created` properties** now properly located in `metadata` objects only

**Commands Status Update:**
✅ **COMPLETED HIGH-PRIORITY COMMANDS:**
1. ✅ `show` - Added --tag flag + fixed projectRoot passing
2. ✅ `add-task` - Already had proper tag support  
3. ✅ `list` - Already had proper tag support
4. ✅ `move` - Already had proper tag support
5. ✅ `tags` - Fixed errors and working perfectly

**REMAINING COMMANDS TO FIX:**
❌ `set-status` - Update task status (needs tag context)
❌ `next` - Find next task (needs tag context)
❌ `update-task` - Update specific task (needs tag context)
❌ `update-subtask` - Update subtask (needs tag context)
❌ `add-subtask` - Add subtasks (needs tag context)
❌ `remove-task` - Remove tasks (needs tag context)
❌ `remove-subtask` - Remove subtasks (needs tag context)

**Data Integrity Status:**
- ✅ Migration logic working correctly
- ✅ Tag creation/deletion working with proper metadata
- ✅ File corruption prevention active
- ✅ Automatic cleanup during write operations
- ✅ Tagged task lists system fully functional

**Next Steps:** Continue with remaining commands (set-status, next, etc.) to complete task 103.5
</info added on 2025-06-13T02:48:17.985Z>

## 6. Integrate Automatic Tag Creation from Git Branches [pending]
### Dependencies: 103.4
### Description: Implement logic to create tags based on git branch names using a --from-branch flag, integrating with git APIs to detect the current branch.
### Details:
Enable seamless context switching between code branches and task tags. Use add-tag internally when creating tags from branch names.

## 7. Update State Management for Current Tag Tracking [done]
### Dependencies: 103.4
### Description: Ensure .taskmaster/state.json properly tracks the current tag with currentTag field set to 'master' by default during initialization.
### Details:
Update initialization logic to create state.json with currentTag set to 'master', ensuring the state file accurately reflects the active tag across sessions.
<info added on 2025-06-11T20:49:28.104Z>
STATE MANAGEMENT: Updated scripts/init.js to create state.json during initialization with proper initial state: currentTag: 'master', lastSwitched timestamp, branchTagMapping, migrationNoticeShown flag. createStateJson() function in utils.js handles state file creation during migration. State management integrated into complete migration system.
</info added on 2025-06-11T20:49:28.104Z>

## 8. Ensure Full Backward Compatibility [pending]
### Dependencies: 103.2, 103.5, 103.7
### Description: Guarantee that users without tags continue to operate in the 'master' context without disruption or required changes.
### Details:
Test all workflows for legacy users and ensure no regressions.

## 9. Update Documentation and Help Menus [done]
### Dependencies: 103.4, 103.5, 103.6, 103.8
### Description: Revise user documentation, migration notes, and CLI help menus to reflect new tag-related features and usage patterns, specifically documenting the add-tag command.
### Details:
Provide clear instructions and examples for all tag management features, ensuring add-tag command is properly documented with consistent naming.

## 10. Conduct Comprehensive System Testing and QA [done]
### Dependencies: 103.8, 103.9
### Description: Perform end-to-end testing of the tagged task lists system, including migration, tag management, task operations, and context switching.
### Details:
Ensure all features work as intended and meet quality standards, with specific focus on add-tag command functionality.

## 11. Create Core Tag Management Functions [pending]
### Dependencies: 103.1, 103.3
### Description: Implement core tag management functions in scripts/modules/task-manager/ following the established pattern. Include functions for createTag, deleteTag, listTags, useTag, renameTag, copyTag, and tag resolution logic.
### Details:


## 12. Implement MCP Direct Functions for Tag Management [pending]
### Dependencies: 103.11
### Description: Create MCP direct function wrappers in mcp-server/src/core/direct-functions/ for all tag management operations, following the established pattern like add-task.js
### Details:


## 13. Create MCP Tools for Tag Management [pending]
### Dependencies: 103.12
### Description: Implement MCP tools in mcp-server/src/tools/ for all tag management operations (add-tag, delete-tag, list-tags, use-tag, rename-tag, copy-tag), following the established pattern like add-task.js
### Details:


## 14. Create State Management Utilities [done]
### Dependencies: 103.3, 103.7
### Description: Implement utilities for reading/writing current tag state, tag resolution logic (currentTag from state -> --tag flag -> defaultTag fallback), and state file validation
### Details:


## 15. Implement Tasks.json Migration Logic [done]
### Dependencies: 103.1, 103.2
### Description: Create specific migration logic to transform existing tasks.json format (array of tasks) to the new tagged format ({tags: {master: {tasks: [...]}}}). Include validation and rollback capabilities.
### Details:
<info added on 2025-06-11T20:50:25.721Z>
MIGRATION LOGIC: Implemented in scripts/modules/utils.js with performCompleteTagMigration(), migrateConfigJson(), createStateJson(), and markMigrationForNotice() functions. Silent migration triggers on readJSON() for tasks.json files. Migration notice system implemented in commands.js with displayTaggedTasksFYI() from ui.js. Complete 3-part migration: tasks.json + config.json + state.json all handled automatically.
</info added on 2025-06-11T20:50:25.721Z>

## 16. Update Documentation for Tagged Task Lists System [done]
### Dependencies: 103.8, 103.9
### Description: Update all documentation in /docs to reflect the new tagged task lists architecture and migration system
### Details:
Update docs to be aware of the new tagged structure: - Update command-reference.md with new tag-related commands - Update task-structure.md to explain tagged format - Update configuration.md with tagged system config - Update tutorial.md with tagged workflow - Update migration-guide.md for tagged migration - Ensure all examples reflect new structure
<info added on 2025-06-11T21:12:52.662Z>
COMPLETED: All documentation files have been successfully updated to reflect the tagged task lists system. Key updates include:

- docs/task-structure.md: Added complete tagged format explanation, data structure overview, migration details, and best practices
- docs/configuration.md: Updated with tagged system configuration, state management, and new settings
- docs/migration-guide.md: Added comprehensive tagged system migration process, verification steps, and team coordination guidelines
- .cursor/rules/*.mdc files: Updated architecture.mdc, dev_workflow.mdc, taskmaster.mdc, tasks.mdc, utilities.mdc, new_features.mdc, git_workflow.mdc, and glossary.mdc to be aware of tagged system

All documentation now properly reflects Part 1 implementation and prepares for Part 2 features. Documentation is fully aligned with the new tagged task structure.
</info added on 2025-06-11T21:12:52.662Z>

## 17. Implement Task Template Importing from External .json Files [pending]
### Dependencies: None
### Description: Implement a mechanism to import tasks from external .json files, treating them as task templates. This allows users to add new .json files to the .taskmaster/tasks folder. The system should read these files, extract tasks under a specific tag, and merge them into the main tasks.json. The 'master' tag from template files must be ignored to prevent conflicts, and the primary tasks.json file will always take precedence over imported tags.
### Details:
Key implementation steps: 1. Develop a file watcher or a manual import command to detect and process new .json files in the tasks directory. 2. Implement logic to read an external json file, identify the tag key, and extract the array of tasks. 3. Handle potential conflicts: if an imported tag already exists in the main tasks.json, the existing tasks should be preserved and new ones appended, or the import should be skipped based on a defined precedence rule. 4. Ignore any 'master' key in template files to protect the integrity of the main task list. 5. Update task ID sequencing to ensure imported tasks are assigned unique IDs that don't conflict with existing tasks.

## 18. be able to move a task from one tag to another [pending]
### Dependencies: None
### Description: 
### Details:


## 19. complexity report support for tags [pending]
### Dependencies: None
### Description: save separate report when using a tag or add to the existing report but section into tags
### Details:


